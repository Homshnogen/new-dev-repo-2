Compiler-based Seminal Input Features Detection
-------------------------------------------------------------------------------------------
About
This project, developed as part of the CSC412/512 course, tackles the crucial task of understanding and predicting program behaviors, focusing on runtime performance. While traditional compilers rely heavily on code-based estimations of program behaviors, this project introduces a novel approach by considering program inputs as a critical factor influencing behavior.
Programs often exhibit varying behaviors based on the input they receive. For instance, a matrix multiplication program's runtime is more influenced by the dimensions of the matrices rather than their exact element values. These essential input characteristics that significantly impact program behavior are referred to as "seminal input features."

-------------------------------------------------------------------------------------------
Prerequisites
This project relies on the following packages, which can be installed using apt on Ubuntu/Debian systems:
- clang
- llvm-14-dev
- make
You can install these packages with the following command:
sudo apt install -y clang llvm-14-dev make

-------------------------------------------------------------------------------------------
Building and Running Passes
Compiling Passes
The project includes a Makefile that simplifies the compilation of LLVM passes. To build the passes, navigate to the project directory and run the following command which will compile all the passes defined in the project: 
	make

Using LLVM Passes
While our Makefile does build all require programs in src, to develop an .ll file input the following command:
	clang -fpass-plugin="/path/to/pass.so" -S input.c -o output.ll

Replace /path/to/pass.so with the actual path to the compiled pass, input.c with your source code file, and output.ll with the desired LLVM IR output file name.

To apply a pass and compile a C program (output executable):
	clang output.ll -o output

Replace /path/to/pass.so with the actual path to the compiled pass and input.c with your source code file. The output executable will be named output.

Running Individual Programs
To test an individual program with your LLVM pass, you can use the following command:
	./output

Replace output with the name of the executable generated by the previous step.

-------------------------------------------------------------------------------------------
Profiling Execution
To profile program execution with Valgrind, run the following command only after running "make" first:
make profile

This command will execute all the test programs and generate Callgrind output files for each program in the profiling directory.

Analyzing Profiling Data
To analyze the profiling data generated by Valgrind, use the following command:
make analyze

This command will generate a profiling analysis report with information about the instructions executed by each program.

To clean up the project directory and remove compiled passes, LLVM IR files, and profiling data, run:
make clean

This command will remove all generated files and directories.
